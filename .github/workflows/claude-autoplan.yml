name: Claude Autoplan (/tasks generator)
on:
  issues:
    types: [opened, edited, labeled]

permissions:
  issues: write

jobs:
  plan:
    if: >
      (github.event.action == 'labeled' && github.event.label.name == 'needs-plan') ||
      (github.event.action != 'labeled' && contains(github.event.issue.labels.*.name, 'needs-plan'))
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      CLAUDE_MODEL: claude-3-5-sonnet-20240620
    steps:
      - name: Dump event (debug)
        run: |
          echo "EVENT=${GITHUB_EVENT_NAME}"
          jq . < "$GITHUB_EVENT_PATH" || true

      - name: Guard - API key
        run: |
          if [ -z "${ANTHROPIC_API_KEY:-}" ]; then
            echo "No ANTHROPIC_API_KEY; skipping autoplanning." && exit 0
          fi

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build prompt with Gemini analysis
        run: |
          # Get issue content
          printf "%s\n\n%s\n" "${{ github.event.issue.title }}" "${{ github.event.issue.body }}" > issue.txt
          
          # Extract Gemini summary from issue comments if available
          curl -sS -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            | jq -r '.[] | select(.body | contains("## ðŸ“Š Gemini Analysis Summary")) | .body' \
            | sed -n '/```json/,/```/p' | sed '1d;$d' > gemini_summary.json || echo "{}" > gemini_summary.json
          
          cat > sys.txt << 'EOF'
          You are the CTO. Break down the spec into actionable development tasks.

          Use the Gemini analysis summary when available to understand project structure and priorities.
          Return ONLY strict JSON:

          {
            "epic": string,
            "assignee": "CursorDev", 
            "labels": string[],
            "tasks": [{"title": string, "body": string, "labels"?: string[]}, ...]
          }
          
          Make tasks specific, actionable, and technically focused. Each task should be completable by a developer.
          EOF
          
          # Combine original spec + Gemini analysis
          echo "=== ORIGINAL SPEC ===" > combined.txt
          cat issue.txt >> combined.txt
          echo -e "\n=== GEMINI ANALYSIS ===" >> combined.txt
          cat gemini_summary.json >> combined.txt

      - name: Call Claude
        run: |
          curl -sS https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d "{
              \"model\": \"${CLAUDE_MODEL}\",
              \"max_tokens\": 2000,
              \"system\": $(jq -Rs . < sys.txt),
              \"messages\": [{\"role\":\"user\",\"content\": $(jq -Rs . < combined.txt)}]
            }" > claude.json
          jq -r '.content[0].text' claude.json > tasks.json.txt
          cat tasks.json.txt | jq . >/dev/null

      - name: Post /tasks comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          printf "/tasks\n\`\`\`json\n%s\n\`\`\`\n" "$(cat tasks.json.txt)" > comment.md
          jq -Rs --arg b "$(cat comment.md)" '{"body":$b}' <<< "" > body.json
          curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            -d @body.json \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"