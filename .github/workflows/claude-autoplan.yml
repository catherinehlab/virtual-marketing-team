name: Claude Autoplan (/tasks generator)
on:
  issues:
    types: [opened, edited, labeled]

permissions:
  issues: write

jobs:
  plan:
    if: >
      (github.event.action == 'labeled' && github.event.label.name == 'needs-plan') ||
      (github.event.action != 'labeled' && contains(github.event.issue.labels.*.name, 'needs-plan'))
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      CLAUDE_MODEL: claude-3-5-sonnet-20240620
    steps:
      - name: Dump event (debug)
        run: |
          echo "EVENT=${GITHUB_EVENT_NAME}"
          jq . < "$GITHUB_EVENT_PATH" || true

      - name: Guard - API key
        run: |
          if [ -z "${ANTHROPIC_API_KEY:-}" ]; then
            echo "No ANTHROPIC_API_KEY; skipping autoplanning." && exit 0
          fi

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build prompt with Gemini analysis
        run: |
          # Get issue content
          printf "%s\n\n%s\n" "${{ github.event.issue.title }}" "${{ github.event.issue.body }}" > issue.txt
          
          # Extract Gemini summary from issue comments if available
          curl -sS -H "Authorization: Bearer ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            | jq -r '.[] | select(.body | contains("## ðŸ“Š Gemini Analysis Summary")) | .body' \
            | sed -n '/```json/,/```/p' | sed '1d;$d' > gemini_summary.json || echo "{}" > gemini_summary.json
          
          cat > sys.txt << 'EOF'
          You are the CTO. Break down the spec into actionable development tasks.

          Use the Gemini analysis summary when available to understand project structure and priorities.
          Return ONLY strict JSON:

          {
            "epic": string,
            "assignee": "CursorDev", 
            "labels": string[],
            "tasks": [{"title": string, "body": string, "labels"?: string[]}, ...]
          }
          
          Make tasks specific, actionable, and technically focused. Each task should be completable by a developer.
          EOF
          
          # Combine original spec + Gemini analysis
          echo "=== ORIGINAL SPEC ===" > combined.txt
          cat issue.txt >> combined.txt
          echo -e "\n=== GEMINI ANALYSIS ===" >> combined.txt
          cat gemini_summary.json >> combined.txt

      - name: Call Claude
        run: |
          echo "=== COMBINED INPUT ==="
          cat combined.txt
          echo "=== SYSTEM PROMPT ==="
          cat sys.txt
          
          # Create API payload
          jq -n --arg system "$(cat sys.txt)" --arg content "$(cat combined.txt)" '{
            "model": env.CLAUDE_MODEL,
            "max_tokens": 2000,
            "system": $system,
            "messages": [{"role": "user", "content": $content}]
          }' > claude_payload.json
          
          echo "=== CLAUDE PAYLOAD ==="
          cat claude_payload.json
          
          # Call Claude API
          curl -sS https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @claude_payload.json > claude.json
          
          echo "=== CLAUDE RESPONSE ==="
          cat claude.json
          
          # Check for API errors
          if jq -e '.error' claude.json > /dev/null; then
            echo "Claude API Error:"
            jq '.error' claude.json
            exit 1
          fi
          
          # Extract content with fallback
          if jq -e '.content[0].text' claude.json > /dev/null; then
            jq -r '.content[0].text' claude.json > tasks.json.txt
          else
            echo "No valid response from Claude, using fallback"
            cat > tasks.json.txt << 'EOF'
{
  "epic": "AI Marketing Assistant v2.0 Development",
  "assignee": "CursorDev",
  "labels": ["cursor-task", "ai-marketing", "mvp"],
  "tasks": [
    {
      "title": "Setup Next.js 14 project structure",
      "body": "Initialize Next.js 14 with App Router, TypeScript, Tailwind CSS",
      "labels": ["frontend", "setup"]
    },
    {
      "title": "Supabase database schema",
      "body": "Design and implement database schema for users, content, campaigns, analytics",
      "labels": ["backend", "database"]
    },
    {
      "title": "AI content generation API",
      "body": "Integrate OpenAI GPT-4, Claude, and Gemini for content generation",
      "labels": ["backend", "ai-integration"]
    },
    {
      "title": "Real-time monitoring dashboard",
      "body": "Build dashboard for social media monitoring and brand mentions",
      "labels": ["frontend", "dashboard"]
    },
    {
      "title": "ROI tracking system",
      "body": "Implement analytics and ROI calculation features",
      "labels": ["backend", "analytics"]
    }
  ]
}
EOF
          fi
          
          echo "=== EXTRACTED TEXT ==="
          cat tasks.json.txt
          
          # Extract JSON from response (handle markdown)
          if grep -q '```json' tasks.json.txt; then
            sed -n '/```json/,/```/p' tasks.json.txt | sed '1d;$d' > tasks.json
          elif grep -q '{' tasks.json.txt; then
            cat tasks.json.txt > tasks.json
          else
            cp tasks.json.txt tasks.json
          fi
          
          # Validate JSON
          if ! jq . tasks.json > /dev/null; then
            echo "Invalid JSON, creating simple task structure"
            jq -n '{
              epic: "Development Tasks",
              assignee: "CursorDev", 
              labels: ["cursor-task"],
              tasks: [{"title": "Implement features from spec", "body": "Detailed implementation based on requirements"}]
            }' > tasks.json
          fi
          
          echo "=== FINAL TASKS JSON ==="
          cat tasks.json
          cp tasks.json tasks.json.txt

      - name: Post /tasks comment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          printf "/tasks\n\`\`\`json\n%s\n\`\`\`\n" "$(cat tasks.json.txt)" > comment.md
          jq -Rs --arg b "$(cat comment.md)" '{"body":$b}' <<< "" > body.json
          curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            -d @body.json \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"