name: Issue Broadcast (Gemini → Claude → Cursor)
on:
  issues:
    types: [opened, edited, labeled, reopened, closed, assigned, unassigned]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: broadcast-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

jobs:
  notify-agents:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build event summary and notify
        env:
          GH_TOKEN: ${{ github.token }}
          CLAUDE: ${{ vars.CLAUDE_HANDLE || 'ClaudeCode' }}
          CURSOR: ${{ vars.CURSOR_HANDLE || 'CursorDev' }}
        run: |
          E="$GITHUB_EVENT_PATH"
          ACT="${{ github.event.action }}"
          TITLE=$(jq -r '.issue.title' "$E")
          URL=$(jq -r '.issue.html_url' "$E")
          WHO="${{ github.actor }}"
          LABEL=$(jq -r '.label.name // ""' "$E")
          BODY=$(jq -r '.issue.body // ""' "$E" | head -c 800)
          
          # Build summary
          printf "**Event**: %s by @%s\n**Issue**: [%s](%s)\n" "$ACT" "$WHO" "$TITLE" "$URL" > summary.md
          if [ "$LABEL" != "" ]; then printf "**Label**: %s\n" "$LABEL" >> summary.md; fi
          printf "\n**Body (truncated)**\n%s\n" "$BODY" >> summary.md
          
          # Notify Claude
          echo "[@$CLAUDE]" > claude_comment.txt
          echo "### Context Capsule" >> claude_comment.txt
          cat summary.md >> claude_comment.txt
          echo "" >> claude_comment.txt
          echo "> Auto-mention: event broadcast" >> claude_comment.txt
          jq -Rs --rawfile body claude_comment.txt '{"body":$body}' > claude_body.json
          curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
            -d @claude_body.json \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          
          # Check if Cursor should be notified
          HAS_CURSOR=$(jq -r '([.issue.labels[].name]|index("cursor-task")) != null' "$E")
          READY=$(jq -r '.comment.body // ""' "$E" | grep -qi '\bready\b' && echo 1 || echo 0)
          
          if [ "$HAS_CURSOR" = "true" ] || [ "$READY" -eq 1 ]; then
            # Assign Cursor
            curl -sS -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
              -d "{\"assignees\":[\"$CURSOR\"]}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/assignees" >/dev/null || true
            
            # Notify Cursor
            CURSOR_BODY="@$CURSOR 작업 준비되었습니다. (auto-broadcast)"
            jq -Rs --arg b "$CURSOR_BODY" '{"body":$b}' <<< "" > cursor_body.json
            curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
              -d @cursor_body.json \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          else
            echo "No cursor-task label / ready keyword — skip Cursor notification."
          fi